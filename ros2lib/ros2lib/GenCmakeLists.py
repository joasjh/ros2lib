import yaml

config_file_name = 'config.yaml'
lib_project_name = 'ros2lib'
custom_msg_pkg_name = ''

# Load YAML configuration
def load_config():
    global config_file_name, custom_msg_pkg_name
    with open(config_file_name, 'r') as file:
        config = yaml.safe_load(file)

        custom_msg_pkg_name = config['args']['custom_msg_pkg_name']

# Write the ros2lib CMakeLists.txt
def write_cmake(config):
    global lib_project_name, custom_msg_pkg_name

    cmake_content = f"""# Generated by GenCmakeLists.py

cmake_minimum_required(VERSION 3.5)
project({lib_project_name})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set var
set(CUSTOM_PKG_NAME {custom_msg_pkg_name})
set(PROJ_INCLUDE_DIRS include
  ${{CMAKE_CURRENT_SOURCE_DIR}}/include
)

# Add ROS Essential pkg
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
# Add Custom Msg pkg
find_package(${{CUSTOM_PKG_NAME}} REQUIRED)

# Add Source to library build
file(GLOB_RECURSE PROJECT_HEADER_FILES "${{CMAKE_CURRENT_SOURCE_DIR}}/include/{lib_project_name}/*.h")
file(GLOB_RECURSE PROJECT_SOURCE_FILES "${{CMAKE_CURRENT_SOURCE_DIR}}/src/{lib_project_name}/*.cpp")

add_library(${{PROJECT_NAME}}
  ${{PROJECT_HEADER_FILES}}
  ${{PROJECT_SOURCE_FILES}}
)

target_include_directories(${{PROJECT_NAME}} PUBLIC
  ${{PROJ_INCLUDE_DIRS}}
)

ament_target_dependencies(${{PROJECT_NAME}}
  rclcpp
  ${{CUSTOM_PKG_NAME}}
)

add_executable(main src/{lib_project_name}/main.cpp)

target_link_libraries(main
  ${{PROJECT_NAME}}
)

ament_target_dependencies(main
  rclcpp
  ${{CUSTOM_PKG_NAME}} 
)

ament_package()"""

    with open('CMakeLists.txt', 'w') as file:
        file.write(cmake_content)

    print("CMakeLists.txt generation SUCCESS")

def main():
    config = load_config()
    write_cmake(config)

if __name__ == "__main__":
    main()